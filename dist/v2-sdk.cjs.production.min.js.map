{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  1: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  4: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  5: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0x6725f303b657a9451d8ba641348b6761a6cc7a17',\n  100: '0xA818b4F111Ccac7AA31D0BCc0806d64F2E0737D7',\n  137: '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32'\n}\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  1: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n  4: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n  5: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66',\n  100: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93',\n  137: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n  //0x7c98585907f30103ef7177d90c636ddeb0cd45451d3966f92aa4d93517bfff25\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS[tokenA.chainId], tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","1","4","5","56","97","100","137","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","sortsBefore","this","liquidityToken","Token","chainId","getAddress","tokenA","tokenB","_ref","factoryAddress","_ref2","token0","getCreate2Address","keccak256","pack","address","computePairAddress","_proto","involvesToken","token","equals","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","tradeComparator","a","b","ioComp","equalTo","lessThan","inputOutputComparator","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","i","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","args","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}